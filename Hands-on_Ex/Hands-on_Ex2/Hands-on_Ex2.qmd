---
title: "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation"
editor: visual
---

## Overview

In this hands-on exercise, I learn how to compute Global and Local Measure of Spatial Autocorrelation using **spdep** package.

## Getting Started

The code chunk below install and load sf, spdep, tmap and tidyverse packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Importing Geospatial Data

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### Import csv file

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

This code chunk will be used to update the attribute table of *hunan*\'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe.

```{r}
hunan <- left_join(hunan,hunan2012)
```

### Visualising Regional Development Indicator

This code chunk will draw a basemap and a choropleth map showing the distribution of GDPPC 2012.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## Global Spatial Autocorrelation

### Computing Contiguity Spatial Weights

This code chunk will compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

### Row-standardised weights matrix

This code chunk will assign weights to each neighboring polygon.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

### Global Spatial Autocorrelation: Moran\'s I

#### Maron\'s I test

This code chunk will performs Moran\'s I statistical testing.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

#### Computing Monte Carlo Moran\'s I

This code chunk will performs permutation test 1000 simulations for Moran\'s I statistic.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

#### Visualising Monte Carlo Moran\'s I

The code chunk below will plot the distribution of the statistical values as a histogram examine the simulated Moran\'s I test statistics in greater detail.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

### Global Spatial Autocorrelation: Geary\'s

#### Geary\'s C test

This code chunk will performs Geary\'s C test for spatial autocorrelation.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

#### Computing Monte Carlo Geary\'s C

This code chunk will performs permutation test 1000 simulations for Geary's C statistic.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

#### Visualising the Monte Carlo Geary\'s C

The code chunk below will plot a histogram to reveal the distribution of the simulated values.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

## Spatial Correlogram

### Compute Moran\'s I correlogram

This code chunk will compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran\'s I.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

This code chunk will print out the analysis results to examine the full analysis report.

```{r}
print(MI_corr)
```

### Compute Geary\'s C correlogram and plot

This code chunk will compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary\'s C.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

This code chunk will print out the analysis report to examine the full analysis report.

```{r}
print(GC_corr)
```

## Cluster and Outlier Analysis

### Computing local Moran\'s I

This code chunk will compute local Moran\'s I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

This code chunk will list the content of the local Moran matrix derived by using *printCoefmat()*.

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### Mapping the local Moran\'s I

This code chunk will append the local Moran\'s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Mapping local Moran\'s I values

This code chunk will plot the local Moran\'s I values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### Mapping local Moran\'s I p-values

This code chunk will produce a choropleth map of Moran\'s I p-values.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### Mapping both local Moran\'s I values and p-values

This code chunk will plot both the local Moran\'s I values map and its corresponding p-values map next to each other for effective interpretation.

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

### Plotting Moran scatterplot

This code chunk will plot the Moran scatterplot of GDPPC 2012.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

### Plotting Moran scatterplot with standardised variable

This code chunk will center (subtracting the mean of the corresponding columns) and scale the variable (dividing the (centered) variable by their standard deviations).

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector
```

This code chunk will plot the Moran scatterplot again.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

This code chunk shows the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
# centers the variable of interest around its mean:
DV <- hunan$GDPPC - mean(hunan$GDPPC)
#center the local Moran’s around the mean:
C_mI <- localMI[,1] - mean(localMI[,1])
#set a statistical significance level for the local Moran:
signif <- 0.05
#define the high-high, low-low, low-high and high-low categories:
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
#places non-significant Moran in the category 0:
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

This code chunk will build the LISA map.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

This code chunk will plot both the local Moran\'s I values map and its corresponding p-values map next to each other for effective interpretation.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis

### Deriving distance-based weight matrix

#### Deriving the centroid

This code chunk will get the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

This code chunk will get the latitude, which is the second value in each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

This code chunk will put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

This code chunk will determine the upper limit for distance band.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

#### Computing fixed distance weight matrix

This code chunk will compute the distance weight matrix.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Convert the nb object into spatial weights object:

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

### Computing adaptive distance weight matrix

This code chunk will control the numbers of neighbours directly using k-nearest neighbours.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Convert the nb object into spatial weights object:

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing Gi statistics

### Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

This code chunk will join the Gi values to their corresponding hunan sf data frame.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping Gi values with fixed distance weights

This code chunk shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

### Gi statistics using adaptive distance

This code chunk will compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping Gi values with adaptive distance weights

This code chunk shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
