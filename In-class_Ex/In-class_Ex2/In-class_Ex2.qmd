---
title: "In-class Exercise 2"
editor: visual
---

## Getting Started

The code chunk below will install and load tidyverse, sf, spdep, tmap and funModeling packages.

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

## Importing Geospatial Data

### Importing water point geospatial data

This code chunk will import the water point geospatial data.

```{r}
wp <- st_read(dsn = "geodata", layer = "geo_export",crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

This code chunk will save the extracted sf data table (wp) into an output file (wp_nga.rds) in rds data format.

```{r}
write_rds(wp, "geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

This code chunk will import the LGA boundary data.

```{r}
nga <- st_read(dsn = "geodata",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

## Data Wrangling

### Recoding NA values into string

This code chunk will recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

### EDA

This code chunk will display the distribution of *status_cle* field in *wp_nga* by using **funModeling** package.

```{r}
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

### Extracting funtional water point

This code chunk will select functional water points.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

Show the distribution of these points:

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-funtional water point

This code chunk will select non-functional water points.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

Show the distribution of these points:

```{r}
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

This code chunk will select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)
```

This code chunk will save the tidy sf data table into rds format.

```{r}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

## Visualising the spatial dsitribution of water points

```{r}
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
