---
title: "In-class Exercise 1"
editor: visual
---

## Overview

In this in-class exercise, I learn how to compute spatial weights using R.

## Getting Started

The code chunk below will install and load tidyverse, sf, spdep and tmap packages.

```{r}
pacman::p_load(sf, tidyverse, spdep, tmap)
```

## Importing Geospatial Data

### Importing polygon features

This code chunk will import ESRI shapefile into R.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### Importing attribute data in csv

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)
```

## Visualising Regional Development Indicator

This code chunk will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

### Computing (QUEEN) contiguity based neighbours

This code chunk is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

see the neighbors for the first polygon in the object:

```{r}
wm_q[[1]]
```

retrieve the county name of Polygon ID=1:

```{r}
hunan$County[1]
```

reveal the county names of the five neighboring polygons:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

retrieve the GDPPC of these five countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

use *str() to* display the complete weight matrix:

```{r}
str(wm_q)
```

### Creating (ROOK) contiguity based neighbors

This code chunk is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising contiguity weights

get longitude values, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

get latitude values, which is the second value in each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

#### Plotting Queen contiguity based neighbors map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## Computing distance based neighbors

### Determine the cut-off distance

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing fixed distance weight matrix

This code chunk will compute the distance weight matrix.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

This code chunk will use *str()* to display the content of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

These code chunks below is another way to display the structure of the weight matrix.

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

This code chunk will plot the distance weight matrix.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

This code chunk will plot the red lines (links of 1st nearest neighbours) and black lines (links of neighbours within the cut-off distance of 62km) next to each other.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### Computing adaptive distance weight matrix

This code chunk will use k-nearest neighbors to control the numbers of neighbors directly.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

This code chunk will use *str()* to display the content of the matrix.

```{r}
str(knn6)
```

#### Plotting distance based neighbors

This code chunk will plot the weight matrix.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

This code chunk will compute the distances between areas.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### Row-standardised weights matrix

These code chunks will assign weights to each neighboring polygon.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

```{r}
rswm_q$weights[10]
```

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

### Spatial lag with row-standardized weights

This code chunk will compute the average neighbor GDPPC value for each polygon.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Retrieve the GDPPC of these five countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

This code chunk will append the spatially lag GDPPC values onto hunan sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The code chunk below shows the average neighboring income values for each county.

```{r}
head(hunan)
```

This code chunk will plot both the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighboring values

This code chunk will assign binary weights to neighbors.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

This code chunk will compute a lag variable from weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

The code chunk below is used to examine the result.

```{r}
lag_sum
```

This code chunk will append the *lag_sum GDPPC* field into sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

This code chunk will plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window average

Assign k6 to a new variable:

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbour list:

```{r}
include.self(wm_q1)
```

Obtain weights with *nb2listw()*:

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create the lag variable from our weight structure and GDPPC variable:

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable *listw* object into a data.frame:

```{r}
lag.list.knn6a <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_knn6a.res <- as.data.frame(lag.list.knn6a)
colnames(lag_knn6a.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

### Spatial window sum

Assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
wm_q1 <- wm_q
```

This code chunk will add the diagonal element to the neighbor list.

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

This code chunk will assign binary weights to the neighbor structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

This code chunk will use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

This code chunk will compute the lag variable.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

This code chunk will convert the lag variable *listw* object into a data.frame.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

This code chunk will append *w_sum GDPPC* values onto *hunan* sf data.frame.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

This code chunk will plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```
